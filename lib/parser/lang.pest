WHITESPACE = _{ " " | "\n" | "\t" }
program = { SOI ~ block ~ EOI }
block = _{ (statement ~ ";")+ }

variable = @{ !(keyword ~ WHITESPACE) ~  (ASCII_ALPHA | "_") ~ (ASCII_ALPHA|ASCII_DIGIT|"_")* }
literal = { ASCII_DIGIT+ }

kw_read_int = _{ "read_int" }
kw_print = _{ "print_int" }
kw_return = _{ "return" }
kw_let = _{ "let" }
kw_true = _{ "true" }
kw_false = _{ "false" }
kw_if = _{ "if" }
kw_else = _{ "else"}
kw_while = _{"while"}
kw_set = _{"set"}

keyword = _{
  kw_read_int
  | kw_print
  | kw_return
  | kw_let
  | kw_true
  | kw_false
  | kw_if
  | kw_else
  | kw_while
  | kw_set
}

bin_op = { "+" | "-" | "&&" | "||" }
un_op = { "-" | "!" }
cmp = { "==" | "<=" | "<" | ">=" | ">" }

statement = { 
  if_statement
  | while_statement
  | let_statement
  | set_statement
  | print_statement
  | paren_statement
}

paren_statement = { "(" ~ statement ~ ")" }

while_statement = { kw_while ~ expression ~ "{" ~ block ~ "}" }
if_statement = { kw_if ~ expression ~ "{" ~ block ~ "}" ~ else_start ~ "{" ~ block ~ "}" }
else_start = { kw_else }
let_statement = { kw_let ~ variable ~ "=" ~ expression}
set_statement = { kw_set ~ variable ~ "=" ~ expression} 
print_statement = { kw_print ~ "(" ~ expression ~ ")" }

expression = { prim_expression ~ left_rec_expression? }

prim_expression = {
  paren_exp
  | unary_op
  | read_int
  | literal
  | bool
  | variable
}

left_rec_expression = { 
  binary_op
  | cmp_op
}

paren_exp = { "(" ~ expression  ~ ")" }
read_int = { kw_read_int }
unary_op = { un_op ~ expression }
bool = { kw_true | kw_false }
binary_op = { bin_op ~ expression }
cmp_op = { cmp ~ expression }
